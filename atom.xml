<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Runoneall</title>
  
  
  <link href="https://blog.oneall.eu.org/atom.xml" rel="self"/>
  
  <link href="https://blog.oneall.eu.org/"/>
  <updated>2025-06-16T11:11:32.000Z</updated>
  <id>https://blog.oneall.eu.org/</id>
  
  <author>
    <name>Tom Brown</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>将webhook转换为websocket的工具</title>
    <link href="https://blog.oneall.eu.org/2025/06/16/%E5%B0%86webhook%E8%BD%AC%E6%8D%A2%E4%B8%BAwebsocket%E7%9A%84%E5%B7%A5%E5%85%B7/"/>
    <id>https://blog.oneall.eu.org/2025/06/16/%E5%B0%86webhook%E8%BD%AC%E6%8D%A2%E4%B8%BAwebsocket%E7%9A%84%E5%B7%A5%E5%85%B7/</id>
    <published>2025-06-16T11:11:32.000Z</published>
    <updated>2025-06-16T11:11:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>地址：<br><a href="https://github.com/FramerOrg/HookToWS">https://github.com/FramerOrg/HookToWS</a></p><p>特点：</p><ol><li>支持多客户端</li><li>无需持久化</li><li>无需多端口</li></ol><p>docker安装：</p><pre><code class="language-shell">docker pull runoneall/hook-to-wsdocker run -d --name hook-to-ws -p 3000:3000 -e WS_AUTH_TOKEN=your_secure_token_here -e PORT=3000 runoneall/hook-to-ws</code></pre><p>连接：<br>首先连接ws：</p><pre><code class="language-plaintext">ws://&lt;your_domain&gt;:&lt;port&gt;/?token=&lt;your_token&gt;&amp;path=&lt;your_path&gt;</code></pre><p>然后程序会在 &#x2F;webhook&#x2F;<your_path> 处监听POST请求</p><p>对应的webhook地址为：</p><pre><code class="language-plaintext">http://&lt;your_domain&gt;:&lt;port&gt;/webhook/&lt;your_path&gt;</code></pre><p>如果有ssl那就是 wss 和 https</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;地址：&lt;br&gt;&lt;a href=&quot;https://github.com/FramerOrg/HookToWS&quot;&gt;https://github.com/FramerOrg/HookToWS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;支持多客户端&lt;/li&gt;
&lt;li&gt;</summary>
      
    
    
    
    <category term="默认" scheme="https://blog.oneall.eu.org/categories/%E9%BB%98%E8%AE%A4/"/>
    
    
  </entry>
  
  <entry>
    <title>claw run搭建2fa管理器</title>
    <link href="https://blog.oneall.eu.org/2025/06/06/claw-run%E6%90%AD%E5%BB%BA2fa%E7%AE%A1%E7%90%86%E5%99%A8/"/>
    <id>https://blog.oneall.eu.org/2025/06/06/claw-run%E6%90%AD%E5%BB%BA2fa%E7%AE%A1%E7%90%86%E5%99%A8/</id>
    <published>2025-06-06T10:38:46.000Z</published>
    <updated>2025-06-16T03:13:41.781Z</updated>
    
    <content type="html"><![CDATA[<p>好处：<br>除前端外基本没有网络开销，而且还很实用（可能是最有用的方式？）</p><p><img src="https://s.rmimg.com/optimized/2X/3/32f81fbe5df763e1753c501a1fce40c6f1f68949_2_1380x174.png"></p><p>GitHub 地址：<br><a href="https://github.com/quicklyon/2FAuth-docker">https://github.com/quicklyon/2FAuth-docker</a></p><p>搭建：</p><ul><li>Image：<code>easysoft/2fauth:latest</code></li><li>Usage：<code>Fixed</code></li><li>CPU：<code>0.1</code></li><li>Memory：<code>128M</code></li><li>Port：<code>8000</code></li><li>Local Storage：<code>2G</code></li></ul><p>费用：<br><img src="https://s.rmimg.com/original/2X/3/314cb4fad6aa1887dd8e296a855707595ebba15c.png"><br><code>0.03*31=0.93</code>，完全够</p><p>后台管理：<br>因为目前这个 image 还有些 bug，所以得手动允许 CORS 和 Mixed Content（期待大佬修复）</p><p><code>chrome://flags</code> 找到 <code>Insecure origins treated as secure</code> 添加 <code>http://你的域名</code> 并 <code>Enable</code><br>浏览器添加允许跨域插件并启动</p><p>进入后台后点击底部的设置，往下滑找到 <code>禁用注册</code><br><img src="https://s.rmimg.com/original/2X/d/d585263e34f51fd729874eb9807db142dd51b8f4.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;好处：&lt;br&gt;除前端外基本没有网络开销，而且还很实用（可能是最有用的方式？）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s.rmimg.com/optimized/2X/3/32f81fbe5df763e1753c501a1fce40c6f1f68949_2_138</summary>
      
    
    
    
    <category term="默认" scheme="https://blog.oneall.eu.org/categories/%E9%BB%98%E8%AE%A4/"/>
    
    
  </entry>
  
  <entry>
    <title>loc.cc使用acme.sh自动签ssl</title>
    <link href="https://blog.oneall.eu.org/2025/06/04/loc-cc%E4%BD%BF%E7%94%A8acme-sh%E8%87%AA%E5%8A%A8%E7%AD%BEssl/"/>
    <id>https://blog.oneall.eu.org/2025/06/04/loc-cc%E4%BD%BF%E7%94%A8acme-sh%E8%87%AA%E5%8A%A8%E7%AD%BEssl/</id>
    <published>2025-06-04T13:14:47.000Z</published>
    <updated>2025-06-16T03:13:41.782Z</updated>
    
    <content type="html"><![CDATA[<p>关于如何添加 ns 记录，目前除手动同步两边记录外并未有好方法，改 SOA 并未生效<br>关于 ssl 的问题，可以使用 webroot 验证，确保域名能够访问<br>此处用 serv00 演示，因为可以用 devil 自动添加证书</p><p>演示：<br><img src="https://s.rmimg.com/original/2X/5/562d06ecc9ce277082114386219d479ad64d70bc.png"></p><ol><li>安装 acme.sh</li></ol><pre><code class="language-shell">curl https://get.acme.sh | sh -s email=你的邮箱</code></pre><ol start="2"><li>设置验证路径</li></ol><pre><code class="language-shell">mkdir -p ~/ssl/update-sh/ # 用于存放更新脚本mkdir -p ~/domains/你的域名/public_html/.well-known/acme-challenge # 用于webroot验证</code></pre><ol start="3"><li>自动更新脚本（注意要用 <code>fullchain</code> 否则不完整）</li></ol><pre><code class="language-shell">#!/usr/local/bin/bashDOMAIN=&quot;你的域名&quot;IP=&quot;128.204.223.46&quot;CERT_DIR=&quot;~/ssl&quot;devil ssl www del $IP $DOMAINdevil ssl www add $IP &quot;$CERT_DIR/$DOMAIN.fullchain.crt&quot; &quot;$CERT_DIR/$DOMAIN.key&quot; $DOMAIN</code></pre><ol start="4"><li>添加证书</li></ol><pre><code class="language-shell">acme.sh --issue -d 你的域名 \    -w ~/domains/你的域名/public_html \    --cert-file ~/ssl/你的域名.crt \    --key-file ~/ssl/你的域名.key \    --fullchain-file ~/ssl/你的域名.fullchain.crt \    --reloadcmd &quot;~/ssl/update-sh/你的域名.sh&quot;</code></pre><ol start="5"><li>自动续期（如果没有）</li></ol><pre><code class="language-shell">acme.sh --install-cronjob</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;关于如何添加 ns 记录，目前除手动同步两边记录外并未有好方法，改 SOA 并未生效&lt;br&gt;关于 ssl 的问题，可以使用 webroot 验证，确保域名能够访问&lt;br&gt;此处用 serv00 演示，因为可以用 devil 自动添加证书&lt;/p&gt;
&lt;p&gt;演示：&lt;br&gt;&lt;img </summary>
      
    
    
    
    <category term="默认" scheme="https://blog.oneall.eu.org/categories/%E9%BB%98%E8%AE%A4/"/>
    
    
  </entry>
  
  <entry>
    <title>免费docker容器鸡</title>
    <link href="https://blog.oneall.eu.org/2025/05/19/%E5%85%8D%E8%B4%B9docker%E5%AE%B9%E5%99%A8%E9%B8%A1/"/>
    <id>https://blog.oneall.eu.org/2025/05/19/%E5%85%8D%E8%B4%B9docker%E5%AE%B9%E5%99%A8%E9%B8%A1/</id>
    <published>2025-05-19T15:28:22.000Z</published>
    <updated>2025-05-19T15:28:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>免费 docker 容器鸡，可开端口，每次一小时，不限次，有 root<br>地址：<a href="https://kodekloud.com/">https://kodekloud.com/</a></p><p>注册后找到 AI Tutor 的课程</p><p><img src="https://s.rmimg.com/original/2X/d/d76f37e8e4f0c28bffc45d48ac31e21c21c31599.png"></p><p>前面的介绍不用看，直接到后面的实操阶段：xxx tutor</p><p><img src="https://s.rmimg.com/original/2X/6/672ae5bc827d40d8c2f1988684dac8b325058643.jpeg"></p><p><img src="https://s.rmimg.com/original/2X/0/00cd04eb774d2cd25d9c553e8f459c48012e49c8.png"></p><p>但注意：只有 1 小时<br><img src="https://s.rmimg.com/original/2X/1/1f223478fe57622a2432c6fc29c73453782ce8ca.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;免费 docker 容器鸡，可开端口，每次一小时，不限次，有 root&lt;br&gt;地址：&lt;a href=&quot;https://kodekloud.com/&quot;&gt;https://kodekloud.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;注册后找到 AI Tutor 的课程&lt;/p&gt;
&lt;p&gt;&lt;i</summary>
      
    
    
    
    <category term="默认" scheme="https://blog.oneall.eu.org/categories/%E9%BB%98%E8%AE%A4/"/>
    
    
  </entry>
  
  <entry>
    <title>Github部署静态博客</title>
    <link href="https://blog.oneall.eu.org/2025/05/01/Github%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
    <id>https://blog.oneall.eu.org/2025/05/01/Github%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</id>
    <published>2025-05-01T10:34:55.000Z</published>
    <updated>2025-05-01T10:34:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>此文章非Pages教程，我打算从typecho迁移到hexo，但是之前因为文件丢过一次，导致整个博客彻底停更，就一直用的typecho，后来得群友启发，用GitHub Action自动打包推到Netlify，颇有成效，于是写篇文章出来</p><p>具体可看：<a href="https://github.com/runoneall/blog">https://github.com/runoneall/blog</a></p><ol><li><p>创建仓库，名称随意，注意 .gitignore 选 Node<br>这里我直接用blog做仓库名</p></li><li><p>创建codespace<br><img src="https://s.rmimg.com/2025-05-01/1746087828-570689-2025-05-01-162319.png"></p></li><li><p>按照hexo官方教程搭建博客<br>这里文件夹我还是用 blog，<code>npx hexo init blog</code></p></li><li><p>搭建好后创建workflow</p></li></ol><pre><code class="language-yaml">name: Build And Deploy to Public Branchon:  workflow_dispatch:jobs:  build-and-deploy:    runs-on: ubuntu-latest    steps:      - name: Checkout repository        uses: actions/checkout@v4        with:          fetch-depth: 0      - name: Set up Node.js LTS        uses: actions/setup-node@main        with:          node-version: latest      - name: Install Hexo CLI        run: npm install hexo      - name: Install dependencies and generate        run: |          cd blog          npm install          npx hexo clean          npx hexo generate      - name: Deploy to public branch        uses: peaceiris/actions-gh-pages@v3        with:          github_token: $&#123;&#123; secrets.REPO_TOKEN &#125;&#125;          publish_dir: ./blog/public          destination_dir: ./          publish_branch: public          keep_files: false</code></pre><p>意思是：拉取代码 -&gt; 安装nodejs -&gt; 安装hexo -&gt; 安装依赖并生成静态文件 -&gt; 提交到public分支<br>(这里需要在仓库设置里创建名为REPO_TOKEN的secret，令牌需要对仓库有写入权限，勾选repo即可)</p><ol start="5"><li>在netlify上创建项目，选择blog仓库，分支选public，点部署即可</li></ol><p>这样一来只要GitHub不炸文件就丢不了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;此文章非Pages教程，我打算从typecho迁移到hexo，但是之前因为文件丢过一次，导致整个博客彻底停更，就一直用的typecho，后来得群友启发，用GitHub Action自动打包推到Netlify，颇有成效，于是写篇文章出来&lt;/p&gt;
&lt;p&gt;具体可看：&lt;a href</summary>
      
    
    
    
    <category term="默认" scheme="https://blog.oneall.eu.org/categories/%E9%BB%98%E8%AE%A4/"/>
    
    
  </entry>
  
  <entry>
    <title>alpine的alist服务脚本</title>
    <link href="https://blog.oneall.eu.org/2025/04/30/alpine%E7%9A%84alist%E6%9C%8D%E5%8A%A1%E8%84%9A%E6%9C%AC/"/>
    <id>https://blog.oneall.eu.org/2025/04/30/alpine%E7%9A%84alist%E6%9C%8D%E5%8A%A1%E8%84%9A%E6%9C%AC/</id>
    <published>2025-04-30T04:32:00.000Z</published>
    <updated>2025-04-30T04:47:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>此是对 <a href="https://dev.oneall.eu.org/archives/63">https://dev.oneall.eu.org/archives/63</a> 的补充<br>原帖用的 screen 来启动 alist，但缺点是开机得手动启动</p><p>于是我参考了这篇帖子 <a href="https://mailberry.com.cn/2024/12/alpine-install-alist">https://mailberry.com.cn/2024/12/alpine-install-alist</a><br>实测不可用</p><p>于是我开始对原贴脚本进行修改<br><code>/etc/init.d/alist</code></p><pre><code class="language-shell">#!/sbin/openrc-runname=&quot;alist&quot;description=&quot;Alist service&quot;pidfile=&quot;/var/run/alist.pid&quot;directory=&quot;/root/alistrun&quot;command=&quot;./alist&quot;command_args=&quot;server&quot;depend() &#123;    need net&#125;start_pre() &#123;    checkpath --directory --owner root:root --mode 0755 &quot;$directory&quot;&#125;start() &#123;    ebegin &quot;Starting $name&quot;    cd &quot;$directory&quot; || return 1    nohup $command $command_args &gt;/dev/null 2&gt;&amp;1 &amp;    echo $! &gt; &quot;$pidfile&quot;    eend $?&#125;stop() &#123;    ebegin &quot;Stopping $name&quot;    if [ -f &quot;$pidfile&quot; ]; then        kill $(cat &quot;$pidfile&quot;) 2&gt;/dev/null        rm -f &quot;$pidfile&quot;    fi    eend $?&#125;</code></pre><pre><code class="language-shell">chmod +x /etc/init.d/alistrc-update add alist</code></pre><p>启动：<code>rc-service alist start</code><br>停止：<code>rc-service alist stop</code><br>状态：<code>rc-service alist status</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;此是对 &lt;a href=&quot;https://dev.oneall.eu.org/archives/63&quot;&gt;https://dev.oneall.eu.org/archives/63&lt;/a&gt; 的补充&lt;br&gt;原帖用的 screen 来启动 alist，但缺点是开机得手动启动&lt;/p</summary>
      
    
    
    
    <category term="默认" scheme="https://blog.oneall.eu.org/categories/%E9%BB%98%E8%AE%A4/"/>
    
    
  </entry>
  
  <entry>
    <title>将域名添加到fnl小鸡上</title>
    <link href="https://blog.oneall.eu.org/2025/04/29/%E5%B0%86%E5%9F%9F%E5%90%8D%E6%B7%BB%E5%8A%A0%E5%88%B0fnl%E5%B0%8F%E9%B8%A1%E4%B8%8A/"/>
    <id>https://blog.oneall.eu.org/2025/04/29/%E5%B0%86%E5%9F%9F%E5%90%8D%E6%B7%BB%E5%8A%A0%E5%88%B0fnl%E5%B0%8F%E9%B8%A1%E4%B8%8A/</id>
    <published>2025-04-29T13:25:57.000Z</published>
    <updated>2025-04-29T13:25:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>这里以 alist.oneall.eu.org 为例</p><ol><li><p>开放端口<br><img src="https://s.rmimg.com/2025-04-29/1745919888-694481-2025-04-29-173721.png"></p></li><li><p>将域名指向fnl小鸡ip（先不开小黄云过验证）<br><img src="https://s.rmimg.com/2025-04-29/1745919695-388859-2025-04-29-173609.png"></p></li><li><p>到管理面板添加域名<br><img src="https://s.rmimg.com/2025-04-29/1745919743-131494-2025-04-29-173734.png"></p></li><li><p>按要求添加根域验证（验证成功后打开小黄云）<br><img src="https://s.rmimg.com/2025-04-29/1745919794-600079-2025-04-29-173632.png"></p></li><li><p>创建origin rules<br><img src="https://s.rmimg.com/2025-04-29/1745919847-337763-2025-04-29-173839.png"><br><img src="https://s.rmimg.com/2025-04-29/1745919930-493146-2025-04-29-173846.png"></p></li><li><p>若小鸡没有ssl证书<br><img src="https://s.rmimg.com/2025-04-29/1745919953-923417-2025-04-29-173642.png"></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这里以 alist.oneall.eu.org 为例&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;开放端口&lt;br&gt;&lt;img src=&quot;https://s.rmimg.com/2025-04-29/1745919888-694481-2025-04-29-173721.png&quot;&gt;&lt;/p&gt;</summary>
      
    
    
    
    <category term="默认" scheme="https://blog.oneall.eu.org/categories/%E9%BB%98%E8%AE%A4/"/>
    
    
  </entry>
  
  <entry>
    <title>alpine部署alist</title>
    <link href="https://blog.oneall.eu.org/2025/04/29/alpine%E9%83%A8%E7%BD%B2alist/"/>
    <id>https://blog.oneall.eu.org/2025/04/29/alpine%E9%83%A8%E7%BD%B2alist/</id>
    <published>2025-04-29T10:52:15.000Z</published>
    <updated>2025-04-29T10:52:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>记一次从 claw cloud run 迁移到 fnl mini 的经历，之前已经重装成 alpine 系统了，所以是 alpine 部署 alist 教程</p><p>基本版本可从 app launchpad 找到<br><img src="https://s.rmimg.com/2025-04-29/1745916291-632035-2025-04-29-164259.png"></p><pre><code class="language-shell">apk add screenmkdir alistrun &amp;&amp; cd alistrunwget https://github.com/AlistGo/alist/releases/download/v3.41.0/alist-linux-musl-amd64.tar.gztar -xzf alist-linux-musl-amd64.tar.gzrm alist-linux-musl-amd64.tar.gzchmod +x alistscreen -R alist./alist server&lt;Control + A&gt; dcd ..</code></pre><p>在 .&#x2F;alist server 时，会出现一次行密码，第一次登录需要<br><img src="https://s.rmimg.com/2025-04-29/1745916389-874980-2025-04-29-163903.png"></p><p>因为 alpine 使用 musl，所以需要下载 alist 的 musl 版本，若使用默认 gcc 版本会遇到命令无任何输出的情况</p><p>替换 releases&#x2F;download&#x2F;v3.41.0 可以安装 alist 其他版本</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;记一次从 claw cloud run 迁移到 fnl mini 的经历，之前已经重装成 alpine 系统了，所以是 alpine 部署 alist 教程&lt;/p&gt;
&lt;p&gt;基本版本可从 app launchpad 找到&lt;br&gt;&lt;img src=&quot;https://s.rmim</summary>
      
    
    
    
    <category term="默认" scheme="https://blog.oneall.eu.org/categories/%E9%BB%98%E8%AE%A4/"/>
    
    
  </entry>
  
  <entry>
    <title>这存储用不完了</title>
    <link href="https://blog.oneall.eu.org/2025/04/28/%E8%BF%99%E5%AD%98%E5%82%A8%E7%94%A8%E4%B8%8D%E5%AE%8C%E4%BA%86/"/>
    <id>https://blog.oneall.eu.org/2025/04/28/%E8%BF%99%E5%AD%98%E5%82%A8%E7%94%A8%E4%B8%8D%E5%AE%8C%E4%BA%86/</id>
    <published>2025-04-28T15:24:43.000Z</published>
    <updated>2025-04-28T15:24:43.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s.rmimg.com/2025-04-28/1745845841-390892-2025-04-28-210911.png"><br>第一个用的阿里云盘Open的驱动，貌似直接登录会卡住，用的扫码的方式获取token，存了部完整的魔禁，还剩60多G</p><p>第二个是cfr2，存储容量不明，有说总共10G的，有说每月10G的，主要是文件分享和图床，开了域名访问和页面缓存规则</p><p>第三个是看到 <a href="https://www.nodeloc.com/d/27848">https://www.nodeloc.com/d/27848</a> 领的，现在被薅没了，选的ny</p><p>第四个是看到 <a href="https://www.nodeloc.com/d/5943">https://www.nodeloc.com/d/5943</a> 领的，没用邀请码，貌似现在是超过20G要收费了</p><p>这个Alist部署在claw cloud run上，每月5刀赠金，消耗0.04每天，完全没问题</p><p>挂载时策略选302，与服务商服务器直连，不会消耗alist服务器流量</p><p>还剩 60+25+20&#x3D;105G，完全够用，我不是屯屯党</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s.rmimg.com/2025-04-28/1745845841-390892-2025-04-28-210911.png&quot;&gt;&lt;br&gt;第一个用的阿里云盘Open的驱动，貌似直接登录会卡住，用的扫码的方式获取token，存了部完整的魔禁，</summary>
      
    
    
    
    <category term="默认" scheme="https://blog.oneall.eu.org/categories/%E9%BB%98%E8%AE%A4/"/>
    
    
  </entry>
  
  <entry>
    <title>为Mini小鸡扩展1GB虚拟内存</title>
    <link href="https://blog.oneall.eu.org/2025/04/24/%E4%B8%BAMini%E5%B0%8F%E9%B8%A1%E6%89%A9%E5%B1%951GB%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/"/>
    <id>https://blog.oneall.eu.org/2025/04/24/%E4%B8%BAMini%E5%B0%8F%E9%B8%A1%E6%89%A9%E5%B1%951GB%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/</id>
    <published>2025-04-24T11:02:00.000Z</published>
    <updated>2025-04-24T11:04:58.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s.rmimg.com/2025-04-24/1745484882-765922-2025-04-24-165309.png"><br>是从某个一键脚本抽离出来的</p><pre><code class="language-sh">new_swap=1024  # 单位MBswap_partitions=$(grep -E &#39;^/dev/&#39; /proc/swaps | awk &#39;&#123;print $1&#125;&#39;)for partition in $swap_partitions; do    swapoff &quot;$partition&quot;    wipefs -a &quot;$partition&quot;    mkswap -f &quot;$partition&quot;doneswapoff /swapfilerm -f /swapfiledd if=/dev/zero of=/swapfile bs=1M count=$new_swapchmod 600 /swapfilemkswap /swapfileswapon /swapfile</code></pre><p>需要root，开机后运行一次就可以了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s.rmimg.com/2025-04-24/1745484882-765922-2025-04-24-165309.png&quot;&gt;&lt;br&gt;是从某个一键脚本抽离出来的&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;ne</summary>
      
    
    
    
    <category term="默认" scheme="https://blog.oneall.eu.org/categories/%E9%BB%98%E8%AE%A4/"/>
    
    
  </entry>
  
  <entry>
    <title>一个占用较小的网络浏览器</title>
    <link href="https://blog.oneall.eu.org/2025/04/23/%E4%B8%80%E4%B8%AA%E5%8D%A0%E7%94%A8%E8%BE%83%E5%B0%8F%E7%9A%84%E7%BD%91%E7%BB%9C%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    <id>https://blog.oneall.eu.org/2025/04/23/%E4%B8%80%E4%B8%AA%E5%8D%A0%E7%94%A8%E8%BE%83%E5%B0%8F%E7%9A%84%E7%BD%91%E7%BB%9C%E6%B5%8F%E8%A7%88%E5%99%A8/</id>
    <published>2025-04-23T17:33:19.000Z</published>
    <updated>2025-04-23T17:33:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>是对 <a href="https://dev.oneall.eu.org/archives/59">https://dev.oneall.eu.org/archives/59</a> 的补充<br><img src="https://s.rmimg.com/2025-04-23/1745422179-289992-2025-04-23-232812.png"><br>图中博客是vuepress，算是较现代了，占用还算可以<br><code>apk add falkon</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;是对 &lt;a href=&quot;https://dev.oneall.eu.org/archives/59&quot;&gt;https://dev.oneall.eu.org/archives/59&lt;/a&gt; 的补充&lt;br&gt;&lt;img src=&quot;https://s.rmimg.com/2025-04</summary>
      
    
    
    
    <category term="默认" scheme="https://blog.oneall.eu.org/categories/%E9%BB%98%E8%AE%A4/"/>
    
    
  </entry>
  
  <entry>
    <title>Mini小鸡搭一个还算能用的云电脑</title>
    <link href="https://blog.oneall.eu.org/2025/04/22/Mini%E5%B0%8F%E9%B8%A1%E6%90%AD%E4%B8%80%E4%B8%AA%E8%BF%98%E7%AE%97%E8%83%BD%E7%94%A8%E7%9A%84%E4%BA%91%E7%94%B5%E8%84%91/"/>
    <id>https://blog.oneall.eu.org/2025/04/22/Mini%E5%B0%8F%E9%B8%A1%E6%90%AD%E4%B8%80%E4%B8%AA%E8%BF%98%E7%AE%97%E8%83%BD%E7%94%A8%E7%9A%84%E4%BA%91%E7%94%B5%E8%84%91/</id>
    <published>2025-04-22T10:40:00.000Z</published>
    <updated>2025-04-23T16:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>浏览网页一点问题没有，配置低的vps也可以看<br><img src="https://s.rmimg.com/2025-04-22/1745310185-392883-2025-04-22-161856.png"></p><p>第一步刷轻量系统，这里用alpine 3.20</p><pre><code class="language-sh">wget -O vps.sh https://raw.githubusercontent.com/everett7623/vps_scripts/main/vps.sh &amp;&amp; chmod +x vps.sh &amp;&amp; clear &amp;&amp; ./vps.sh</code></pre><ol><li>安装桌面（这里用lxqt加lxdm）</li></ol><pre><code class="language-sh">setup-xorg-basesetup-user  # 桌面不能root登录apk add lxqt-desktop lxqt-core lxqt-panel lxqt-admin lxqt-config lxqt-notificationd lxqt-powermanagement lxqt-themes openbox setxkbmapaddgroup &lt;user&gt; input  # 将新创建的普通用户加入input和video组addgroup &lt;user&gt; videoapk add dbus dbus-x11 lxdmrc-update add dbusrc-update add lxdmreboot</code></pre><ol start="2"><li>字体和图标</li></ol><pre><code class="language-sh">apk add breeze-icons font-noto-cjk</code></pre><ol start="3"><li>浏览器（火狐算是比较流畅的了）</li></ol><pre><code class="language-sh">apk add firefox</code></pre><ol start="4"><li><p>开启VNC<br><img src="https://s.rmimg.com/2025-04-22/1745311117-804227-2025-04-22-163755.png"></p></li><li><p>重启系统</p></li></ol><pre><code class="language-sh">reboot</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;浏览网页一点问题没有，配置低的vps也可以看&lt;br&gt;&lt;img src=&quot;https://s.rmimg.com/2025-04-22/1745310185-392883-2025-04-22-161856.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;第一步刷轻量系统，这里用alpine 3.</summary>
      
    
    
    
    <category term="默认" scheme="https://blog.oneall.eu.org/categories/%E9%BB%98%E8%AE%A4/"/>
    
    
  </entry>
  
  <entry>
    <title>这次的ba 6th pv吃了不少Eva的点</title>
    <link href="https://blog.oneall.eu.org/2025/04/21/%E8%BF%99%E6%AC%A1%E7%9A%84ba%206th%20pv%E5%90%83%E4%BA%86%E4%B8%8D%E5%B0%91Eva%E7%9A%84%E7%82%B9/"/>
    <id>https://blog.oneall.eu.org/2025/04/21/%E8%BF%99%E6%AC%A1%E7%9A%84ba%206th%20pv%E5%90%83%E4%BA%86%E4%B8%8D%E5%B0%91Eva%E7%9A%84%E7%82%B9/</id>
    <published>2025-04-21T10:35:50.000Z</published>
    <updated>2025-04-21T10:35:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>以下仅表个人观点，欢迎勘误</p><ol><li><p>绫波丽泡LCL<br><img src="https://s.rmimg.com/2025-04-21/1745221853-895725-2025-04-21-153511.png"></p></li><li><p>WILLE在巴黎修复反L结界<br><img src="https://s.rmimg.com/2025-04-21/1745223009-343942-2025-04-21-153637.png"></p></li><li><p>NERV的一艘战舰（推测为Erbsünde）<br><img src="https://s.rmimg.com/2025-04-21/1745223105-626384-2025-04-21-153832.png"></p></li><li><p>暴走的初号机<br><img src="https://s.rmimg.com/2025-04-21/1745223167-554678-2025-04-21-153951.png"></p></li><li><p>量产机<br><img src="https://s.rmimg.com/2025-04-21/1745223179-105679-2025-04-21-154025.png"></p></li><li><p>屋岛作战前（虽然人数不对）<br><img src="https://s.rmimg.com/2025-04-21/1745223201-309792-2025-04-21-154039.png"></p></li><li><p>大决战前明日香和真希波<br><img src="https://s.rmimg.com/2025-04-21/1745223324-691409-2025-04-21-154126.png"></p></li><li><p>初号机和13号机（碇源堂和碇真嗣）<br><img src="https://s.rmimg.com/2025-04-21/1745223444-926117-2025-04-21-154201.png"></p></li><li><p>装备阳电子炮4444C开火<br><img src="https://s.rmimg.com/2025-04-21/1745223582-250486-2025-04-21-154330.png"></p></li><li><p>初号机光翼<br><img src="https://s.rmimg.com/2025-04-21/1745223659-685648-2025-04-21-154428.png"><br><img src="https://s.rmimg.com/2025-04-21/1745223661-64023-2025-04-21-154444.png"></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;以下仅表个人观点，欢迎勘误&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;绫波丽泡LCL&lt;br&gt;&lt;img src=&quot;https://s.rmimg.com/2025-04-21/1745221853-895725-2025-04-21-153511.png&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li</summary>
      
    
    
    
    <category term="默认" scheme="https://blog.oneall.eu.org/categories/%E9%BB%98%E8%AE%A4/"/>
    
    
  </entry>
  
  <entry>
    <title>Typecho使用Fastly CDN</title>
    <link href="https://blog.oneall.eu.org/2025/04/20/Typecho%E4%BD%BF%E7%94%A8Fastly%20CDN/"/>
    <id>https://blog.oneall.eu.org/2025/04/20/Typecho%E4%BD%BF%E7%94%A8Fastly%20CDN/</id>
    <published>2025-04-20T15:01:00.000Z</published>
    <updated>2025-04-20T15:02:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>主要介绍从FNL CDN迁移到Fastly的过程，及踩过的坑</p><p><del>某睿智博主花了两天搞的东西（悲</del><br><img src="https://s.rmimg.com/2025-04-20/1745147772-901837-2025-04-20-191339.png"></p><p>首先是得有 Fastly 账号，然后到 <a href="https://manage.fastly.com/configure">https://manage.fastly.com/configure</a> 配置CDN服务</p><p>配置好后大概是这样<br><img src="https://s.rmimg.com/2025-04-20/1745147889-471716-2025-04-20-191804.png"></p><p>点击 Service configuration -&gt; Edit configuration -&gt; Clone to edit</p><ol><li>配置源站<br><img src="https://s.rmimg.com/2025-04-20/1745148062-585026-2025-04-20-192059.png"><br><img src="https://s.rmimg.com/2025-04-20/1745152648-633351-2025-04-20-203722.png"><br><img src="https://s.rmimg.com/2025-04-20/1745152742-341826-2025-04-20-203857.png"><br><img src="https://s.rmimg.com/2025-04-20/1745152760-792035-2025-04-20-203916.png"></li></ol><p>点击 Origins 并找到源站（这里是Serv00）并点击笔图标</p><ul><li>Name 随便写</li><li>Address 写源站IP</li><li>Enable TLS 若源站有则开启（Serv00 Panel域名有，这里开启）</li><li>Certificate hostname 要和源站 TLS 证书匹配</li><li>SNI hostname 若源站有证书则点开 Match the SNI hostname to the Certificate hostname</li><li>Override host 填博客域名，这里是 dev.oneall.eu.org</li><li>其他保持默认</li></ul><ol start="2"><li>配置加速选项<br>点击 Settings 并按需求开启（以下是我的配置）</li></ol><ul><li>Serve stale content on origin failure</li><li>Force TLS and enable HSTS</li><li>HTTP&#x2F;3</li><li>其余关闭</li></ul><ol start="3"><li>配置缓存<br><img src="https://s.rmimg.com/2025-04-20/1745153319-701066-2025-04-20-204833.png"><br><img src="https://s.rmimg.com/2025-04-20/1745153361-225122-2025-04-20-204917.png"><br><img src="https://s.rmimg.com/2025-04-20/1745153385-783210-2025-04-20-204942.png"></li></ol><p>Fastly默认缓存全站，当你发现后台 &#x2F;admin 进不去或有时能进去，请按照以下配置（我这19个version有10个都是栽在这了）</p><ul><li>Create cache setting</li><li>Condition -&gt; attach a condition</li><li>Name: Is Admin</li><li>Apply if: req.url ~ “^&#x2F;admin”</li><li>Save and apply to this cache setting</li><li>Name: 随便写</li><li>Action: Pass</li><li>其他留空</li></ul><ol start="4"><li>压缩<br><img src="https://s.rmimg.com/2025-04-20/1745153516-709386-2025-04-20-205152.png"></li></ol><p>点击 Content -&gt; Compression</p><ul><li>按需开启</li></ul><p>若要配置 SSL 前往 <a href="https://manage.fastly.com/network/domains">https://manage.fastly.com/network/domains</a><br><img src="https://s.rmimg.com/2025-04-20/1745153784-264081-2025-04-20-205619.png"></p><p>将域名接入Fastly</p><ol><li>前往 SSL 证书的 View subscription details</li><li>找到 TLS configuration and DNS details -&gt; View &#x2F; Edit<br><img src="https://s.rmimg.com/2025-04-20/1745153906-304170-2025-04-20-205821.png"></li><li>按需选择添加记录即可</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;主要介绍从FNL CDN迁移到Fastly的过程，及踩过的坑&lt;/p&gt;
&lt;p&gt;&lt;del&gt;某睿智博主花了两天搞的东西（悲&lt;/del&gt;&lt;br&gt;&lt;img src=&quot;https://s.rmimg.com/2025-04-20/1745147772-901837-2025-04-20</summary>
      
    
    
    
    <category term="默认" scheme="https://blog.oneall.eu.org/categories/%E9%BB%98%E8%AE%A4/"/>
    
    
  </entry>
  
  <entry>
    <title>AliceNetwork开发者云管理Bot</title>
    <link href="https://blog.oneall.eu.org/2025/04/19/AliceNetwork%E5%BC%80%E5%8F%91%E8%80%85%E4%BA%91%E7%AE%A1%E7%90%86Bot/"/>
    <id>https://blog.oneall.eu.org/2025/04/19/AliceNetwork%E5%BC%80%E5%8F%91%E8%80%85%E4%BA%91%E7%AE%A1%E7%90%86Bot/</id>
    <published>2025-04-19T05:46:03.000Z</published>
    <updated>2025-04-19T05:46:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>云湖机器人（需下载云湖APP）</p><p>效果图：<br><img src="https://s.rmimg.com/2025-04-19/1745027138-305955-2025-04-19-093942.png"><br><img src="https://s.rmimg.com/2025-04-19/1745027141-233577-2025-04-19-094122.png"><br><img src="https://s.rmimg.com/2025-04-19/1745027143-928952-2025-04-19-094225.png"></p><p>直接体验：<br><a href="https://yhfx.jwznb.com/share?key=YZInMjHRY6c2&ts=1745027189">https://yhfx.jwznb.com/share?key=YZInMjHRY6c2&amp;ts=1745027189</a></p><p>部署（需python3.12）</p><p>依赖包：</p><pre><code class="language-plaintext">blinker==1.9.0certifi==2025.1.31charset-normalizer==3.4.1click==8.1.8filetype==1.2.0Flask==3.1.0idna==3.10itsdangerous==2.2.0Jinja2==3.1.6MarkupSafe==3.0.2requests==2.32.3urllib3==2.4.0Werkzeug==3.1.3</code></pre><p>部署sdkFrame</p><pre><code class="language-shell">git clone https://github.com/runoneall/sdkFrame.gitpython3 -m sdkFrame -add-origin https://dev.oneall.eu.org/ryhsdk2/map.json -update-origin -set-env YUNHU_TOKEN=云湖机器人token -set-env &#39;SERVER=json:&#123;   1 ↵    &quot;host&quot;: &quot;0.0.0.0&quot;,    &quot;port&quot;: 端口,    &quot;debug&quot;: true,    &quot;threaded&quot;: true  &#125;&#39;python3 -m sdkFrame -install-module SendMessage@r1a-ryhsdk2python3 -m sdkFrame -install-module ServCommand@r1a-ryhsdk2 -install-module ServShortCut@r1a-ryhsdk2</code></pre><p><code>AliceAPI.py</code></p><pre><code class="language-python">import requestsclass EphemeraAPI:    def __init__(self, api_token):        self.EVO_API_BASE = &quot;https://app.alice.ws/cli/v1/Evo/&quot;        self.api_header = &#123;&quot;KP-APIToken&quot;: api_token&#125;    def EvoJob(self, job_name):        return self.EVO_API_BASE + job_name    def InstanceList(self):        resp = requests.get(self.EvoJob(&quot;Instance&quot;), headers=self.api_header).json()        if resp[&quot;status&quot;] != 200:            return None        return resp[&quot;data&quot;]    def PlanList(self):        resp = requests.get(self.EvoJob(&quot;Plan&quot;), headers=self.api_header).json()        if resp[&quot;status&quot;] != 200:            return None        PlanMap = &#123;&#125;        for plan in resp[&quot;data&quot;]:            PlanMap[plan[&quot;name&quot;]] = plan[&quot;id&quot;]        return PlanMap    def PlanOsList(self, plan_id):        resp = requests.post(            self.EvoJob(&quot;PlanToOS&quot;),            headers=self.api_header,            data=&#123;&quot;plan_id&quot;: str(plan_id)&#125;,        ).json()        if resp[&quot;status&quot;] != 200:            return None        OSMap = &#123;&#125;        for _, osGroup in resp[&quot;data&quot;].items():            for osItem in osGroup[&quot;os&quot;]:                OSMap[osItem[&quot;name&quot;]] = osItem[&quot;id&quot;]        return OSMap    def InstanceDeploy(self, plan_id, os_id, hours):        resp = requests.post(            self.EvoJob(&quot;Deploy&quot;),            headers=self.api_header,            data=&#123;&quot;product_id&quot;: str(plan_id), &quot;os_id&quot;: str(os_id), &quot;time&quot;: str(hours)&#125;,        ).json()        if resp[&quot;status&quot;] != 200:            return None        return resp[&quot;data&quot;]    def InstanceDestroy(self, instance_id):        resp = requests.post(            self.EvoJob(&quot;Destroy&quot;),            headers=self.api_header,            data=&#123;&quot;id&quot;: str(instance_id)&#125;,        ).json()        if resp[&quot;status&quot;] != 200:            return False        return True    def InstancePower(self, instance_id, action):        resp = requests.post(            self.EvoJob(&quot;Power&quot;),            headers=self.api_header,            data=&#123;&quot;id&quot;: str(instance_id), &quot;action&quot;: str(action)&#125;,        ).json()        if resp[&quot;status&quot;] != 200:            return False        return True    def InstanceRebuild(self, instance_id, os_id):        resp = requests.post(            self.EvoJob(&quot;Rebuild&quot;),            headers=self.api_header,            data=&#123;&quot;id&quot;: str(instance_id), &quot;os&quot;: str(os_id)&#125;,        ).json()        if resp[&quot;status&quot;] != 200:            return False        return resp[&quot;data&quot;]    def InstanceRenewal(self, instance_id, hours):        resp = requests.post(            self.EvoJob(&quot;Renewal&quot;),            headers=self.api_header,            data=&#123;&quot;id&quot;: str(instance_id), &quot;time&quot;: str(hours)&#125;,        ).json()        if resp[&quot;status&quot;] != 200:            return False        return True</code></pre><p>到 <a href="https://www.yhchat.com/control">https://www.yhchat.com/control</a> 创建机器人</p><p>快捷菜单设置（全部为普通按钮，事件推送）<br>名称随意，记录菜单id<br><img src="https://s.rmimg.com/2025-04-19/1745028339-727178-2025-04-19-100458.png"></p><p>指令列表<br>添加一个普通指令和一个自定义输入指令，名称随意，记录id<br><img src="https://s.rmimg.com/2025-04-19/1745028453-377258-2025-04-19-100639.png"></p><p>自定义输入表单（名称随意，记录id）<br><img src="https://s.rmimg.com/2025-04-19/1745028539-43368-2025-04-19-100819.png"></p><pre><code class="language-plaintext">Plan选项LAX.Evo.Micro#LAX.Evo.Standard#LAX.Evo.Pro#LAX.Evo.UltraOS选项Debian 12 (Bookworm) Minimal#Debian 11 (Bullseye) Minimal#Debian 12 DevKit#Ubuntu Server 20.04 LTS Minimal#Ubuntu Server 22.04 LTS Minimal#CentOS 7 Minimal#CentOS Stream 9 Minimal#AlmaLinux 8 Minimal#AlmaLinux 9 Latest#Alpine Linux 3.19</code></pre><p><code>app.py</code></p><pre><code class="language-python">import jsonimport osimport sdkFrameimport AliceAPIsdk = sdkFrame.init()if not os.path.exists(&quot;db.json&quot;):    with open(&quot;db.json&quot;, &quot;w&quot;, encoding=&quot;utf-8&quot;) as f:        f.write(&quot;&#123;&#125;&quot;)def ReadDB():    with open(&quot;db.json&quot;, &quot;r&quot;, encoding=&quot;utf-8&quot;) as f:        return json.load(f)def WriteDB(data_dict):    with open(&quot;db.json&quot;, &quot;w&quot;, encoding=&quot;utf-8&quot;) as f:        json.dump(data_dict, fp=f, indent=2, ensure_ascii=True)def SetToken(data):    event = data[&quot;event&quot;]    if event[&quot;chat&quot;][&quot;chatType&quot;] == &quot;bot&quot;:        uid = event[&quot;sender&quot;][&quot;senderId&quot;]        token = event[&quot;message&quot;][&quot;content&quot;][&quot;text&quot;]        WriteDB(&#123;**ReadDB(), **&#123;uid: &#123;&quot;token&quot;: token&#125;&#125;&#125;)        sdk.SendMessage.Text(uid, &quot;user&quot;, f&quot;Set &#123;uid&#125; Token &#123;token&#125;&quot;)def InstanceConfig(data):    event = data[&quot;event&quot;]    if event[&quot;chat&quot;][&quot;chatType&quot;] == &quot;bot&quot;:        uid = event[&quot;sender&quot;][&quot;senderId&quot;]        formJson = event[&quot;message&quot;][&quot;content&quot;][&quot;formJson&quot;]        target_plan = formJson[&quot;Plan 选择框表单ID&quot;][&quot;selectValue&quot;]        target_os = formJson[&quot;OS 选择框表单ID&quot;][&quot;selectValue&quot;]        target_hours = formJson[&quot;Hours 输入框表单ID&quot;][&quot;value&quot;]        db = ReadDB()        if uid in db and &quot;token&quot; in db[uid]:            db[uid][&quot;plan&quot;] = target_plan            db[uid][&quot;os&quot;] = target_os            db[uid][&quot;hours&quot;] = target_hours            WriteDB(db)            sdk.SendMessage.Text(                uid,                &quot;user&quot;,                f&quot;&quot;&quot;Default Config:- Plan: &#123;target_plan&#125;- OS: &#123;target_os&#125;- Hours: &#123;target_hours&#125;&quot;&quot;&quot;,            )        else:            sdk.SendMessage.Text(uid, &quot;user&quot;, &quot;Set Token First&quot;)def InstanceInfo(data):    event = data[&quot;event&quot;]    if event[&quot;senderType&quot;] == &quot;user&quot;:        db = ReadDB()        uid = event[&quot;senderId&quot;]        if uid not in db or &quot;token&quot; not in db[uid]:            sdk.SendMessage.Text(uid, &quot;user&quot;, &quot;Set Token First&quot;)            return        if &quot;instance_id&quot; not in db[uid]:            db[uid][&quot;instance_id&quot;] = &quot;&quot;        if db[uid][&quot;instance_id&quot;] == &quot;&quot;:            sdk.SendMessage.Text(uid, &quot;user&quot;, &quot;No Instance Deployed&quot;)            return        instance_id = db[uid][&quot;instance_id&quot;]        sdk.SendMessage.Text(uid, &quot;user&quot;, f&quot;Checking Instance &#123;instance_id&#125;...&quot;)        resp = AliceAPI.EphemeraAPI(db[uid][&quot;token&quot;]).InstanceList()        if resp == None:            sdk.SendMessage.Text(uid, &quot;user&quot;, &quot;Check Failed&quot;)            return        for instance in resp:            if str(instance[&quot;id&quot;]) == instance_id:                sdk.SendMessage.Text(                    uid,                    &quot;user&quot;,                    f&quot;&quot;&quot;Server &#123;instance_id&#125;:- Ipv4: &#123;instance[&quot;ipv4&quot;]&#125;- Ipv6: &#123;instance[&quot;ipv6&quot;]&#125;- Hostname: &#123;instance[&quot;hostname&quot;]&#125;- Cpu Total: &#123;instance[&quot;cpu&quot;]&#125; Core- Cpu Type: &#123;instance[&quot;cpu_name&quot;]&#125;- Memory Total: &#123;instance[&quot;memory&quot;]&#125; MB- Disk Total: &#123;instance[&quot;disk&quot;]&#125; GB- Disk Type: &#123;instance[&quot;disk_type&quot;]&#125;- User: &#123;instance[&quot;user&quot;]&#125;- Password: &#123;instance[&quot;password&quot;]&#125;- Status: &#123;instance[&quot;status&quot;]&#125;- Created At: &#123;instance[&quot;creation_at&quot;]&#125;- Expired At: &#123;instance[&quot;expiration_at&quot;]&#125;- Plan: &#123;instance[&quot;plan&quot;]&#125;- Region: &#123;instance[&quot;region&quot;]&#125;- OS: &#123;instance[&quot;os&quot;]&#125;&quot;&quot;&quot;,                )                breakdef InstanceDeploy(data):    event = data[&quot;event&quot;]    if event[&quot;senderType&quot;] == &quot;user&quot;:        db = ReadDB()        uid = event[&quot;senderId&quot;]        if uid not in db or &quot;token&quot; not in db[uid]:            sdk.SendMessage.Text(uid, &quot;user&quot;, &quot;Set Token First&quot;)            return        if &quot;plan&quot; not in db[uid] or &quot;os&quot; not in db[uid] or &quot;hours&quot; not in db[uid]:            sdk.SendMessage.Text(uid, &quot;user&quot;, &quot;Set Default Config First&quot;)            return        if &quot;instance_id&quot; in db[uid] and db[uid][&quot;instance_id&quot;] != &quot;&quot;:            sdk.SendMessage.Text(uid, &quot;user&quot;, &quot;Instance Already Deployed&quot;)            return        sdk.SendMessage.Text(uid, &quot;user&quot;, &quot;Deploying Instance...&quot;)        target_plan = db[uid][&quot;plan&quot;]        target_os = db[uid][&quot;os&quot;]        target_hours = db[uid][&quot;hours&quot;]        Ephemera = AliceAPI.EphemeraAPI(db[uid][&quot;token&quot;])        plans = Ephemera.PlanList()        oss = Ephemera.PlanOsList(plans[target_plan])        resp = Ephemera.InstanceDeploy(            Ephemera.PlanList()[target_plan], oss[target_os], hours=int(target_hours)        )        if resp == None:            sdk.SendMessage.Text(uid, &quot;user&quot;, &quot;Deploy Failed&quot;)            return        db[uid][&quot;instance_id&quot;] = str(resp[&quot;id&quot;])        WriteDB(db)        sdk.SendMessage.Text(            uid,            &quot;user&quot;,            f&quot;Instance &#123;resp[&#39;id&#39;]&#125; Deployed, Please Wait for 2-3 minutes, Use Info Button to Check Status&quot;,        )def InstanceDestroy(data):    event = data[&quot;event&quot;]    if event[&quot;senderType&quot;] == &quot;user&quot;:        db = ReadDB()        uid = event[&quot;senderId&quot;]        if uid not in db or &quot;token&quot; not in db[uid]:            sdk.SendMessage.Text(uid, &quot;user&quot;, &quot;Set Token First&quot;)            return        if &quot;instance_id&quot; not in db[uid] or db[uid][&quot;instance_id&quot;] == &quot;&quot;:            sdk.SendMessage.Text(uid, &quot;user&quot;, &quot;No Instance Deployed&quot;)            return        instance_id = db[uid][&quot;instance_id&quot;]        sdk.SendMessage.Text(uid, &quot;user&quot;, f&quot;Destroying Instance &#123;instance_id&#125;...&quot;)        resp = AliceAPI.EphemeraAPI(db[uid][&quot;token&quot;]).InstanceDestroy(instance_id)        if resp == False:            sdk.SendMessage.Text(uid, &quot;user&quot;, &quot;Destroy Failed&quot;)            return        del db[uid][&quot;instance_id&quot;]        WriteDB(db)        sdk.SendMessage.Text(uid, &quot;user&quot;, f&quot;Instance &#123;instance_id&#125; Destroyed&quot;)def power_action(data, action):    event = data[&quot;event&quot;]    if event[&quot;senderType&quot;] == &quot;user&quot;:        db = ReadDB()        uid = event[&quot;senderId&quot;]        if uid not in db or &quot;token&quot; not in db[uid]:            sdk.SendMessage.Text(uid, &quot;user&quot;, &quot;Set Token First&quot;)            return        if &quot;instance_id&quot; not in db[uid] or db[uid][&quot;instance_id&quot;] == &quot;&quot;:            sdk.SendMessage.Text(uid, &quot;user&quot;, &quot;No Instance Deployed&quot;)            return        instance_id = db[uid][&quot;instance_id&quot;]        sdk.SendMessage.Text(            uid, &quot;user&quot;, f&quot;Performing &#123;action&#125; on Instance &#123;instance_id&#125;...&quot;        )        resp = AliceAPI.EphemeraAPI(db[uid][&quot;token&quot;]).InstancePower(instance_id, action)        if resp == False:            sdk.SendMessage.Text(uid, &quot;user&quot;, f&quot;&#123;action&#125; Failed&quot;)            return        sdk.SendMessage.Text(uid, &quot;user&quot;, f&quot;Instance &#123;instance_id&#125; &#123;action&#125;ed&quot;)def InstanceBoot(data):    power_action(data, &quot;boot&quot;)def InstanceShutdown(data):    power_action(data, &quot;shutdown&quot;)def InstanceRestart(data):    power_action(data, &quot;restart&quot;)def InstancePoweroff(data):    power_action(data, &quot;poweroff&quot;)def InstanceRebuild(data):    event = data[&quot;event&quot;]    if event[&quot;senderType&quot;] == &quot;user&quot;:        db = ReadDB()        uid = event[&quot;senderId&quot;]        if uid not in db or &quot;token&quot; not in db[uid]:            sdk.SendMessage.Text(uid, &quot;user&quot;, &quot;Set Token First&quot;)            return        if &quot;plan&quot; not in db[uid] or &quot;os&quot; not in db[uid]:            sdk.SendMessage.Text(uid, &quot;user&quot;, &quot;Set Default Config First&quot;)            return        if &quot;instance_id&quot; not in db[uid] or db[uid][&quot;instance_id&quot;] == &quot;&quot;:            sdk.SendMessage.Text(uid, &quot;user&quot;, &quot;No Instance Deployed&quot;)            return        instance_id = db[uid][&quot;instance_id&quot;]        sdk.SendMessage.Text(uid, &quot;user&quot;, f&quot;Rebuilding Instance &#123;instance_id&#125;...&quot;)        Ephemera = AliceAPI.EphemeraAPI(db[uid][&quot;token&quot;])        plans = Ephemera.PlanList()        oss = Ephemera.PlanOsList(plans[db[uid][&quot;plan&quot;]])        resp = Ephemera.InstanceRebuild(instance_id, oss[db[uid][&quot;os&quot;]])        if resp == False:            sdk.SendMessage.Text(uid, &quot;user&quot;, &quot;Rebuild Failed&quot;)            return        sdk.SendMessage.Text(uid, &quot;user&quot;, f&quot;Instance &#123;instance_id&#125; Rebuilt&quot;)def InstanceRenewal(data):    event = data[&quot;event&quot;]    if event[&quot;senderType&quot;] == &quot;user&quot;:        db = ReadDB()        uid = event[&quot;senderId&quot;]        if uid not in db or &quot;token&quot; not in db[uid]:            sdk.SendMessage.Text(uid, &quot;user&quot;, &quot;Set Token First&quot;)            return        if &quot;instance_id&quot; not in db[uid] or db[uid][&quot;instance_id&quot;] == &quot;&quot;:            sdk.SendMessage.Text(uid, &quot;user&quot;, &quot;No Instance Deployed&quot;)            return        instance_id = db[uid][&quot;instance_id&quot;]        sdk.SendMessage.Text(uid, &quot;user&quot;, f&quot;Renewing Instance &#123;instance_id&#125;...&quot;)        target_hours = db[uid][&quot;hours&quot;]        resp = AliceAPI.EphemeraAPI(db[uid][&quot;token&quot;]).InstanceRenewal(            instance_id, int(target_hours)        )        if resp == False:            sdk.SendMessage.Text(uid, &quot;user&quot;, &quot;Renewal Failed&quot;)            return        sdk.SendMessage.Text(            uid, &quot;user&quot;, f&quot;Instance &#123;instance_id&#125; Renewed &#123;target_hours&#125; hours&quot;        )sdk.ServCommand.AddHandle(SetToken, Set Token 指令ID)sdk.ServCommand.AddHandle(InstanceConfig, Default Config 指令ID)sdk.ServShortCut.AddHandle(InstanceInfo, &quot;Info 菜单ID&quot;)sdk.ServShortCut.AddHandle(InstanceDeploy, &quot;Deploy 菜单ID&quot;)sdk.ServShortCut.AddHandle(InstanceDestroy, &quot;Destroy 菜单ID&quot;)sdk.ServShortCut.AddHandle(InstanceBoot, &quot;Boot 菜单ID&quot;)sdk.ServShortCut.AddHandle(InstanceShutdown, &quot;Shutdown 菜单ID&quot;)sdk.ServShortCut.AddHandle(InstanceRestart, &quot;Restart 菜单ID&quot;)sdk.ServShortCut.AddHandle(InstancePoweroff, &quot;Poweroff 菜单ID&quot;)sdk.ServShortCut.AddHandle(InstanceRebuild, &quot;Rebuild 菜单ID&quot;)sdk.ServShortCut.AddHandle(InstanceRenewal, &quot;Renewal 菜单ID&quot;)sdk.Server.AddTrigger(sdk.ServCommand)sdk.Server.AddTrigger(sdk.ServShortCut)sdk.Server.Start()</code></pre><p>启动后填入到 <code>配置消息订阅接口</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;云湖机器人（需下载云湖APP）&lt;/p&gt;
&lt;p&gt;效果图：&lt;br&gt;&lt;img src=&quot;https://s.rmimg.com/2025-04-19/1745027138-305955-2025-04-19-093942.png&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://s.</summary>
      
    
    
    
    <category term="默认" scheme="https://blog.oneall.eu.org/categories/%E9%BB%98%E8%AE%A4/"/>
    
    
  </entry>
  
  <entry>
    <title>AliceNetwork开发者云API封装</title>
    <link href="https://blog.oneall.eu.org/2025/04/13/AliceNetwork%E5%BC%80%E5%8F%91%E8%80%85%E4%BA%91API%E5%B0%81%E8%A3%85/"/>
    <id>https://blog.oneall.eu.org/2025/04/13/AliceNetwork%E5%BC%80%E5%8F%91%E8%80%85%E4%BA%91API%E5%B0%81%E8%A3%85/</id>
    <published>2025-04-13T04:59:07.000Z</published>
    <updated>2025-04-13T04:59:07.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>AliceAPI.py</code></p><pre><code class="language-python">import requestsclass EphemeraAPI:    def __init__(self, api_token):        self.EVO_API_BASE = &quot;https://app.alice.ws/cli/v1/Evo/&quot;        self.api_header = &#123;&quot;KP-APIToken&quot;: api_token&#125;    def EvoJob(self, job_name):        return self.EVO_API_BASE + job_name    def InstanceList(self):        resp = requests.get(self.EvoJob(&quot;Instance&quot;), headers=self.api_header).json()        if resp[&quot;status&quot;] != 200:            return None        return resp[&quot;data&quot;]    def PlanList(self):        resp = requests.get(self.EvoJob(&quot;Plan&quot;), headers=self.api_header).json()        if resp[&quot;status&quot;] != 200:            return None        PlanMap = &#123;&#125;        for plan in resp[&quot;data&quot;]:            PlanMap[plan[&quot;name&quot;]] = plan[&quot;id&quot;]        return PlanMap    def PlanOsList(self, plan_id):        resp = requests.post(            self.EvoJob(&quot;PlanToOS&quot;),            headers=self.api_header,            data=&#123;&quot;plan_id&quot;: str(plan_id)&#125;,        ).json()        if resp[&quot;status&quot;] != 200:            return None        OSMap = &#123;&#125;        for _, osGroup in resp[&quot;data&quot;].items():            for osItem in osGroup[&quot;os&quot;]:                OSMap[osItem[&quot;name&quot;]] = osItem[&quot;id&quot;]        return OSMap    def InstanceDeploy(self, plan_id, os_id, hours):        resp = requests.post(            self.EvoJob(&quot;Deploy&quot;),            headers=self.api_header,            data=&#123;&quot;product_id&quot;: str(plan_id), &quot;os_id&quot;: str(os_id), &quot;time&quot;: str(hours)&#125;,        ).json()        if resp[&quot;status&quot;] != 200:            return None        return resp[&quot;data&quot;]    def InstanceDestroy(self, instance_id):        resp = requests.post(            self.EvoJob(&quot;Destroy&quot;),            headers=self.api_header,            data=&#123;&quot;id&quot;: str(instance_id)&#125;,        ).json()        if resp[&quot;status&quot;] != 200:            return False        return True    def InstancePower(self, instance_id, action):        resp = requests.post(            self.EvoJob(&quot;Power&quot;),            headers=self.api_header,            data=&#123;&quot;id&quot;: str(instance_id), &quot;action&quot;: str(action)&#125;,        ).json()        if resp[&quot;status&quot;] != 200:            return False        return True    def InstanceRebuild(self, instance_id, os_id):        resp = requests.post(            self.EvoJob(&quot;Rebuild&quot;),            headers=self.api_header,            data=&#123;&quot;id&quot;: str(instance_id), &quot;os&quot;: str(os_id)&#125;,        ).json()        if resp[&quot;status&quot;] != 200:            return False        return resp[&quot;data&quot;]    def InstanceRenewal(self, instance_id, hours):        resp = requests.post(            self.EvoJob(&quot;Renewal&quot;),            headers=self.api_header,            data=&#123;&quot;id&quot;: str(instance_id), &quot;time&quot;: str(hours)&#125;,        ).json()        if resp[&quot;status&quot;] != 200:            return False        return True</code></pre><p>从 <a href="https://app.alice.ws/ephemera/console">控制台</a> 获取 <code>API Token</code><br>在同级目录新建 <code>kp-api-token.txt</code> 并写入token</p><pre><code class="language-python">from AliceAPI import EphemeraAPIdef GetApiToken():    with open(&quot;kp-api-token.txt&quot;, &quot;r&quot;, encoding=&quot;utf-8&quot;) as token_file:        api_token = token_file.read()    return api_tokenEphemera = EphemeraAPI(GetApiToken())# ------------------------------------------------------# InstanceListprint(Ephemera.InstanceList())# ------------------------------------------------------# PlanListprint(Ephemera.PlanList())# ------------------------------------------------------# PlanOsListplans = Ephemera.PlanList()print(Ephemera.PlanOsList(plans[&quot;LAX.Evo.Micro&quot;]))# ------------------------------------------------------# InstanceDeployplans = Ephemera.PlanList()oss = Ephemera.PlanOsList(plans[&quot;LAX.Evo.Micro&quot;])print(    Ephemera.InstanceDeploy(        plans[&quot;LAX.Evo.Micro&quot;], oss[&quot;Debian 12 (Bookworm) Minimal&quot;], hours=1    ))# ------------------------------------------------------# InstanceDestroyplans = Ephemera.PlanList()oss = Ephemera.PlanOsList(plans[&quot;LAX.Evo.Micro&quot;])instance_id = Ephemera.InstanceDeploy(    plans[&quot;LAX.Evo.Micro&quot;], oss[&quot;Debian 12 (Bookworm) Minimal&quot;], hours=1)[&quot;id&quot;]print(Ephemera.InstanceDestroy(instance_id))# ------------------------------------------------------# InstancePowerplans = Ephemera.PlanList()oss = Ephemera.PlanOsList(plans[&quot;LAX.Evo.Micro&quot;])instance_id = Ephemera.InstanceDeploy(    plans[&quot;LAX.Evo.Micro&quot;], oss[&quot;Debian 12 (Bookworm) Minimal&quot;], hours=1)[&quot;id&quot;]print(Ephemera.InstancePower(instance_id, &quot;boot&quot;))  # boot shutdown restart poweroff# ------------------------------------------------------# InstanceRebuildplans = Ephemera.PlanList()oss = Ephemera.PlanOsList(plans[&quot;LAX.Evo.Micro&quot;])instance_id = Ephemera.InstanceDeploy(    plans[&quot;LAX.Evo.Micro&quot;], oss[&quot;Debian 12 (Bookworm) Minimal&quot;], hours=1)[&quot;id&quot;]print(Ephemera.InstanceRebuild(instance_id, oss[&quot;AlmaLinux 9 Latest&quot;]))# ------------------------------------------------------# InstanceRenewalplans = Ephemera.PlanList()oss = Ephemera.PlanOsList(plans[&quot;LAX.Evo.Micro&quot;])instance_id = Ephemera.InstanceDeploy(    plans[&quot;LAX.Evo.Micro&quot;], oss[&quot;Debian 12 (Bookworm) Minimal&quot;], hours=1)[&quot;id&quot;]print(Ephemera.InstanceRenewal(instance_id, hours=1))</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;AliceAPI.py&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import requests


class EphemeraAPI:
    def __init__(self, api_token):
 </summary>
      
    
    
    
    <category term="默认" scheme="https://blog.oneall.eu.org/categories/%E9%BB%98%E8%AE%A4/"/>
    
    
  </entry>
  
  <entry>
    <title>低版本mac装docker</title>
    <link href="https://blog.oneall.eu.org/2025/04/09/%E4%BD%8E%E7%89%88%E6%9C%ACmac%E8%A3%85docker/"/>
    <id>https://blog.oneall.eu.org/2025/04/09/%E4%BD%8E%E7%89%88%E6%9C%ACmac%E8%A3%85docker/</id>
    <published>2025-04-09T08:35:35.000Z</published>
    <updated>2025-04-09T08:35:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>翻到台mac mini，运行macOS 10.15，已经不支持安装docker GUI了</p><p>首先安装brew</p><pre><code class="language-zsh">/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;</code></pre><p>安装docker cli</p><pre><code class="language-zsh">brew install docker docker-compose</code></pre><p>安装colima做docker后端</p><pre><code class="language-zsh">brew install colima</code></pre><p>编译安装qemu（我用的7.2.0）</p><pre><code class="language-zsh">brew install pkg-config glib pixman ninja cmake wget sdl2 lzowget https://download.qemu.org/qemu-7.2.0.tar.xztar -xf qemu-7.2.0.tar.xzrm qemu-7.2.0.tar.xz &amp;&amp; cd qemu-7.2.0./configure --target-list=x86_64-softmmu,aarch64-softmmu --enable-debug --enable-sdl --enable-vncmake -j$(sysctl -n hw.logicalcpu)sudo make installcd .. &amp;&amp; rm -rf qemu-7.2.0qemu-system-x86_64 --version</code></pre><p>启动colima</p><pre><code class="language-zsh">colima start  # 后面看着给 --cpu 核心数 --memory 内存(GB)</code></pre><p>运行 <code>docker ps</code> 查看是否安装成功（列表可能为空，无报错就是成功了）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;翻到台mac mini，运行macOS 10.15，已经不支持安装docker GUI了&lt;/p&gt;
&lt;p&gt;首先安装brew&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-zsh&quot;&gt;/bin/bash -c &amp;quot;$(curl -fsSL https://</summary>
      
    
    
    
    <category term="默认" scheme="https://blog.oneall.eu.org/categories/%E9%BB%98%E8%AE%A4/"/>
    
    
  </entry>
  
  <entry>
    <title>基于深度学习的离线tts和stt的python实现</title>
    <link href="https://blog.oneall.eu.org/2025/04/06/%E5%9F%BA%E4%BA%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E7%A6%BB%E7%BA%BFtts%E5%92%8Cstt%E7%9A%84python%E5%AE%9E%E7%8E%B0/"/>
    <id>https://blog.oneall.eu.org/2025/04/06/%E5%9F%BA%E4%BA%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E7%A6%BB%E7%BA%BFtts%E5%92%8Cstt%E7%9A%84python%E5%AE%9E%E7%8E%B0/</id>
    <published>2025-04-06T05:05:00.000Z</published>
    <updated>2025-04-06T05:09:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>安装模型（stt用的vosk-model-cn-0.22，tts用的kokoro-v1.1-zh）</p><pre><code class="language-zsh"># vosk-model-cn-0.22wget https://alphacephei.com/vosk/models/vosk-model-cn-0.22.zipunzip vosk-model-cn-0.22.ziprm vosk-model-cn-0.22.zip# kokoro-v1.1-zhmkdir kokoro-v1.1-zhcd kokoro-v1.1-zhwget https://github.com/thewh1teagle/kokoro-onnx/releases/download/model-files-v1.1/kokoro-v1.1-zh.onnxwget https://github.com/thewh1teagle/kokoro-onnx/releases/download/model-files-v1.1/voices-v1.1-zh.binwget https://huggingface.co/hexgrad/Kokoro-82M-v1.1-zh/raw/main/config.jsoncd ..</code></pre><p>安装依赖</p><pre><code class="language-plaintext">addict==2.4.0annotated-types==0.7.0anyio==4.9.0attrs==25.3.0babel==2.17.0certifi==2025.1.31cffi==1.17.1charset-normalizer==3.4.1cn2an==0.5.23colorama==0.4.6coloredlogs==15.0.1colorlog==6.9.0csvw==3.5.1distro==1.9.0dlinfo==2.0.0espeakng-loader==0.2.4exceptiongroup==1.2.2flatbuffers==25.2.10h11==0.14.0httpcore==1.0.7httpx==0.28.1humanfriendly==10.0idna==3.10isodate==0.7.2jieba==0.42.1jiter==0.9.0joblib==1.4.2jsonschema==4.23.0jsonschema-specifications==2024.10.1kokoro-onnx==0.4.7language-tags==1.2.0misaki==0.9.3mpmath==1.3.0numpy==2.2.4onnxruntime==1.21.0openai==1.70.0ordered-set==4.1.0packaging==24.2phonemizer-fork==3.3.1proces==0.1.7protobuf==6.30.2PyAudio==0.2.14pycparser==2.22pydantic==2.11.2pydantic_core==2.33.1pyparsing==3.2.3pypinyin==0.54.0pypinyin-dict==0.9.0python-dateutil==2.9.0.post0rdflib==7.1.4referencing==0.36.2regex==2024.11.6requests==2.32.3rfc3986==1.5.0rpds-py==0.24.0segments==2.3.0six==1.17.0sniffio==1.3.1sounddevice==0.5.1srt==3.5.3sympy==1.13.3tqdm==4.67.1typing-inspection==0.4.0typing_extensions==4.13.1uritemplate==4.1.1urllib3==2.3.0vosk==0.3.44websockets==15.0.1</code></pre><p>tts.py</p><pre><code class="language-python">import sounddevice as sdimport kokoro_onnx as kokorofrom misaki import zhimport asynciokokoro.MAX_PHONEME_LENGTH = 80class TTS:    def __init__(self):        self.g2p = zh.ZHG2P(version=&quot;1.1&quot;)        self.voice = &quot;zm_009&quot;        self.speed = 1.0        self.model = kokoro.Kokoro(            &quot;kokoro-v1.1-zh/model.onnx&quot;,            &quot;kokoro-v1.1-zh/voices.bin&quot;,            vocab_config=&quot;kokoro-v1.1-zh/config.json&quot;,        )        self.model.create(            self.get_phonemes(&quot;你好，世界！&quot;),            voice=self.voice,            speed=self.speed,            is_phonemes=True,        )        print(&quot;TTS initialized&quot;)    def set_speed(self, speed: float = 1.0):        self.speed = speed    def get_phonemes(self, text: str) -&gt; str:        phonemes, _ = self.g2p(text)        return phonemes    def speak(self, text: str):        async def stream_audio():            stream = self.model.create_stream(                self.get_phonemes(text),                voice=self.voice,                speed=self.speed,                is_phonemes=True,            )            async for audio, audio_rate in stream:                sd.play(audio, audio_rate)                sd.wait()        asyncio.run(stream_audio())</code></pre><p>stt.py</p><pre><code class="language-python">import jsonimport voskimport pyaudioclass STT:    def __init__(self):        self.recognizer = vosk.KaldiRecognizer(vosk.Model(&quot;vosk-model-cn-0.22&quot;), 16000)        self.mic = pyaudio.PyAudio()        self.stream = self.mic.open(            format=pyaudio.paInt16,            channels=1,            rate=16000,            input=True,            frames_per_buffer=4096,        )        self.stop_listening = False        print(&quot;STT initialized&quot;)    def listen(self, on_result: callable):        while not self.stop_listening:            if self.recognizer.AcceptWaveform(                self.stream.read(4096, exception_on_overflow=False)            ):                result = json.loads(self.recognizer.Result())                text: str = result.get(&quot;text&quot;, &quot;&quot;)                if text:                    on_result(text.replace(&quot; &quot;, &quot;&quot;))        self.stream.stop_stream()        self.stream.close()        self.mic.terminate()    def stop(self):        self.stop_listening = True</code></pre><p>用法</p><pre><code class="language-python">import ttsimport stttts_engine = tts.TTS()stt_engine = stt.STT()def call(text: str):    tts_engine.speak(text)    # your logic    #stt_engine.stop()  # stop mic listenstt_engine.listen(call)  # start mic listen</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;安装模型（stt用的vosk-model-cn-0.22，tts用的kokoro-v1.1-zh）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-zsh&quot;&gt;# vosk-model-cn-0.22
wget https://alphacephei.com/v</summary>
      
    
    
    
    <category term="默认" scheme="https://blog.oneall.eu.org/categories/%E9%BB%98%E8%AE%A4/"/>
    
    
  </entry>
  
  <entry>
    <title>vercel搭建跨域API</title>
    <link href="https://blog.oneall.eu.org/2025/03/23/vercel%E6%90%AD%E5%BB%BA%E8%B7%A8%E5%9F%9FAPI/"/>
    <id>https://blog.oneall.eu.org/2025/03/23/vercel%E6%90%AD%E5%BB%BA%E8%B7%A8%E5%9F%9FAPI/</id>
    <published>2025-03-23T07:34:00.000Z</published>
    <updated>2025-03-24T12:05:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用 <code>vercel edge function</code></p><pre><code class="language-typescript">export const runtime = &quot;edge&quot;;async function handleRequest(req: Request) &#123;  const url = new URL(req.url);  const targetUrl = decodeURIComponent(url.search).slice(1);  const reqInit: RequestInit &amp; &#123; duplex?: string &#125; = &#123;    headers: req.headers,    method: req.method,    body: req.body,    redirect: &quot;follow&quot;,    duplex: &quot;half&quot;,  &#125;;  const modifiedRequest = new Request(targetUrl, reqInit);  const resp = await fetch(modifiedRequest);  return new Response(resp.body, &#123;    status: resp.status,    statusText: resp.statusText,    headers: new Headers(&#123;      ...resp.headers,      &quot;Cache-Control&quot;: &quot;no-store&quot;,      &quot;Access-Control-Allow-Methods&quot;: &quot;GET, POST, PUT, DELETE, PATCH, OPTIONS&quot;,      &quot;Access-Control-Allow-Headers&quot;: &quot;*&quot;,      &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;,    &#125;),  &#125;);&#125;export const GET = handleRequest;export const POST = handleRequest;export const PUT = handleRequest;export const DELETE = handleRequest;export const PATCH = handleRequest;export const OPTIONS = handleRequest;</code></pre><p>保存为 <code>vap.ts</code> (名称随意)<br>API地址: <code>&lt;域名&gt;/api/&lt;保存名称&gt;?&lt;目标URL&gt;</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用 &lt;code&gt;vercel edge function&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;export const runtime = &amp;quot;edge&amp;quot;;

async function </summary>
      
    
    
    
    <category term="默认" scheme="https://blog.oneall.eu.org/categories/%E9%BB%98%E8%AE%A4/"/>
    
    
  </entry>
  
  <entry>
    <title>整活成真的了!</title>
    <link href="https://blog.oneall.eu.org/2025/03/18/%E6%95%B4%E6%B4%BB%E6%88%90%E7%9C%9F%E7%9A%84%E4%BA%86-/"/>
    <id>https://blog.oneall.eu.org/2025/03/18/%E6%95%B4%E6%B4%BB%E6%88%90%E7%9C%9F%E7%9A%84%E4%BA%86-/</id>
    <published>2025-03-18T15:45:00.000Z</published>
    <updated>2025-03-24T00:16:38.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s.rmimg.com/2025-03-18/1742308936-745290-renderedimage.jpg"><br><img src="https://s.rmimg.com/2025-03-19/1742347706-834125-1742308966-280949-2025-03-18-224237.png"></p><p>声明 <code>nic.xh.sd</code> 为本人整活所写，跟NodeLoc论坛无任何关系</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s.rmimg.com/2025-03-18/1742308936-745290-renderedimage.jpg&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://s.rmimg.com/2025-03-19/1742347706-834</summary>
      
    
    
    
    <category term="默认" scheme="https://blog.oneall.eu.org/categories/%E9%BB%98%E8%AE%A4/"/>
    
    
  </entry>
  
</feed>
